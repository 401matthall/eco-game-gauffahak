// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;

    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(LinkComponent))]
    [RequireComponent(typeof(CraftingComponent))]
    [RequireComponent(typeof(SolidGroundComponent))]
    public partial class AlchemyBenchObject : WorldObject, IRepresentsItem
    {
        public override LocString DisplayName { get { return Localizer.DoStr("Alchemy Bench"); } }

        public override TableTextureMode TableTexture => TableTextureMode.Metal;

        public virtual Type RepresentedItemType { get { return typeof(AlchemyBenchItem); } }



        protected override void Initialize()
        {
            // N/A
        }

        public override void Destroy()
        {
            base.Destroy();
        }

    }

    [Serialized]
    [LocDisplayName("AlchemyBench")]
    public partial class AlchemyBenchItem : WorldObjectItem<AlchemyBenchObject>
    {
        public override LocString DisplayDescription => Localizer.DoStr("With this bench you can fashion materials from the air.");

        static AlchemyBenchItem()
        {

        }

    }

    public partial class AlchemyBenchRecipe : RecipeFamily
    {
        public AlchemyBenchRecipe()
        {
            this.Recipes = new List<Recipe> { 
                new Recipe("AlchemyBench",Localizer.DoStr("AlchemyBench"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<AlchemyBenchItem>(1),
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(500);
            this.CraftMinutes = CreateCraftTimeValue(1.0f);
            this.Initialize(Localizer.DoStr("AlchemyBench"), typeof(AlchemyBenchRecipe));
            CraftingComponent.AddRecipe(typeof(WorkbenchObject), this);
        }
    }

    public partial class AlchemyGoldOreRecipe : RecipeFamily
    {
        public AlchemyGoldOreRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Gold ore",Localizer.DoStr("Gold ore"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<GoldOreItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Gold ore"), typeof(AlchemyGoldOreRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyIronOreRecipe : RecipeFamily
    {
        public AlchemyIronOreRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Iron ore",Localizer.DoStr("Iron ore"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<IronOreItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Iron ore"), typeof(AlchemyIronOreRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyCopperOreRecipe : RecipeFamily
    {
        public AlchemyCopperOreRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Copper ore",Localizer.DoStr("Copper ore"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<CopperOreItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Copper ore"), typeof(AlchemyCopperOreRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemySandstoneRecipe : RecipeFamily
    {
        public AlchemySandstoneRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Sandstone",Localizer.DoStr("Sandstone"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<SandstoneItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Sandstone"), typeof(AlchemySandstoneRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyShaleRecipe : RecipeFamily
    {
        public AlchemyShaleRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Shale",Localizer.DoStr("Shale"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<ShaleItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Shale"), typeof(AlchemyShaleRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyLimestoneRecipe : RecipeFamily
    {
        public AlchemyLimestoneRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Limestone",Localizer.DoStr("Limestone"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<LimestoneItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Limestone"), typeof(AlchemyLimestoneRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyGraniteRecipe : RecipeFamily
    {
        public AlchemyGraniteRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Granite",Localizer.DoStr("Granite"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<GraniteItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Granite"), typeof(AlchemyGraniteRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyGneissRecipe : RecipeFamily
    {
        public AlchemyGneissRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Gneiss",Localizer.DoStr("Gneiss"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<GneissItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Gneiss"), typeof(AlchemyGneissRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyBasaltRecipe : RecipeFamily
    {
        public AlchemyBasaltRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Basalt",Localizer.DoStr("Basalt"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<BasaltItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Basalt"), typeof(AlchemyBasaltRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyClayRecipe : RecipeFamily
    {
        public AlchemyClayRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Clay",Localizer.DoStr("Clay"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<ClayItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Clay"), typeof(AlchemyClayRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyOakLogRecipe : RecipeFamily
    {
        public AlchemyOakLogRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Oak log",Localizer.DoStr("Oak log"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<OakLogItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Oak log"), typeof(AlchemyOakLogRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }


    public partial class AlchemyCoalRecipe : RecipeFamily
    {
        public AlchemyCoalRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Coal",Localizer.DoStr("Coal"),
                    new IngredientElement[] {},
                    new CraftingElement[]
                    {
                        new CraftingElement<CoalItem>(1),  
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Coal"), typeof(AlchemyCoalRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }

    public partial class AlchemyAntiTalingsRecipe : RecipeFamily
    {
        public AlchemyAntiTalingsRecipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe("Anti-tailings",Localizer.DoStr("Anti-tailings"),
                    new IngredientElement[] {
                       new IngredientElement(typeof(TailingsItem), 10),
                    },
                    new CraftingElement[] {
                        new CraftingElement<SandItem>(1),
                    }
                )
            };
            this.LaborInCalories = CreateLaborInCaloriesValue(0); 
            this.CraftMinutes = CreateCraftTimeValue(0.025f);
            this.Initialize(Localizer.DoStr("Anti-tailings"), typeof(AlchemyAntiTalingsRecipe));
            CraftingComponent.AddRecipe(typeof(AlchemyBenchObject), this);
        }
    }
}
